# Generated by Django 5.2.1 on 2025-09-12 10:48

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('multiple_gym', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Trainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('phone', models.CharField(max_length=15)),
                ('alternate_phone', models.CharField(blank=True, max_length=15)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='trainer_photos/')),
                ('address_line1', models.CharField(blank=True, max_length=100)),
                ('address_line2', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=50)),
                ('state', models.CharField(blank=True, max_length=50)),
                ('pin_code', models.CharField(blank=True, max_length=6)),
                ('specialization', models.CharField(blank=True, help_text='e.g., Weight Training, Yoga, Cardio', max_length=200)),
                ('certifications', models.TextField(blank=True, help_text='List of certifications')),
                ('experience_years', models.IntegerField(default=0)),
                ('bio', models.TextField(blank=True, help_text='Professional bio/description')),
                ('salary_type', models.CharField(choices=[('fixed', 'Fixed Monthly'), ('hourly', 'Per Hour'), ('session', 'Per Session'), ('commission', 'Commission Based')], default='fixed', max_length=20)),
                ('salary_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('hire_date', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_trainers', to=settings.AUTH_USER_MODEL)),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainers', to='multiple_gym.gym')),
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'trainer'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Trainer',
                'verbose_name_plural': 'Trainers',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'gym')},
            },
        ),
        migrations.CreateModel(
            name='TrainerPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_create_members', models.BooleanField(default=False, help_text='Can create new members')),
                ('can_edit_members', models.BooleanField(default=False, help_text='Can edit member profiles')),
                ('can_view_all_members', models.BooleanField(default=True, help_text='Can view all gym members')),
                ('can_create_sessions', models.BooleanField(default=True, help_text='Can create training sessions')),
                ('can_edit_sessions', models.BooleanField(default=True, help_text='Can edit their sessions')),
                ('can_delete_sessions', models.BooleanField(default=False, help_text='Can delete sessions')),
                ('can_upload_content', models.BooleanField(default=True, help_text='Can upload session content')),
                ('can_manage_assignments', models.BooleanField(default=False, help_text='Can assign/unassign members')),
                ('can_view_reports', models.BooleanField(default=False, help_text='Can view gym reports')),
                ('can_view_payments', models.BooleanField(default=False, help_text='Can view member payments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trainer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='trainer_management.trainer')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('session_type', models.CharField(choices=[('individual', 'Individual'), ('group', 'Group'), ('class', 'Class'), ('online', 'Online'), ('assessment', 'Assessment')], default='individual', max_length=20)),
                ('session_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('duration_minutes', models.IntegerField(help_text='Duration in minutes')),
                ('location', models.CharField(blank=True, help_text='Room/Area or Online platform', max_length=200)),
                ('max_participants', models.IntegerField(default=1, help_text='Maximum number of participants')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('workout_plan', models.TextField(blank=True, help_text='Detailed workout plan')),
                ('equipment_needed', models.CharField(blank=True, help_text='Equipment required', max_length=500)),
                ('warm_up_exercises', models.TextField(blank=True)),
                ('main_exercises', models.TextField(blank=True)),
                ('cool_down_exercises', models.TextField(blank=True)),
                ('pre_session_notes', models.TextField(blank=True, help_text='Notes before session')),
                ('post_session_notes', models.TextField(blank=True, help_text='Notes after session')),
                ('trainer_feedback', models.TextField(blank=True, help_text="Trainer's feedback")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='trainer_management.trainer')),
            ],
            options={
                'verbose_name': 'Training Session',
                'verbose_name_plural': 'Training Sessions',
                'ordering': ['-session_date', '-start_time'],
            },
        ),
        migrations.CreateModel(
            name='SessionContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('content_type', models.CharField(choices=[('pdf', 'PDF Document'), ('video', 'Video'), ('youtube', 'YouTube Video'), ('image', 'Image'), ('audio', 'Audio'), ('link', 'External Link'), ('text', 'Text Content')], max_length=20)),
                ('file', models.FileField(blank=True, null=True, upload_to='session_content/')),
                ('youtube_url', models.URLField(blank=True, help_text='YouTube video URL')),
                ('external_url', models.URLField(blank=True, help_text='External link URL')),
                ('text_content', models.TextField(blank=True, help_text='Text-based content')),
                ('file_size', models.BigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('duration', models.CharField(blank=True, help_text='Duration for video/audio content', max_length=20)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
                ('is_required', models.BooleanField(default=False, help_text='Required content for session')),
                ('is_public', models.BooleanField(default=False, help_text='Visible to all members or only participants')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_content', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_materials', to='trainer_management.trainingsession')),
            ],
            options={
                'verbose_name': 'Session Content',
                'verbose_name_plural': 'Session Content',
                'ordering': ['order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MemberTrainerAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(blank=True, help_text='Leave blank for ongoing assignment', null=True)),
                ('assignment_type', models.CharField(choices=[('weight_loss', 'Weight Loss'), ('muscle_gain', 'Muscle Gain'), ('fitness', 'General Fitness'), ('strength', 'Strength Training'), ('cardio', 'Cardio Training'), ('rehabilitation', 'Rehabilitation'), ('sport_specific', 'Sport Specific'), ('other', 'Other')], default='fitness', max_length=50)),
                ('goals', models.TextField(blank=True, help_text='Specific fitness goals')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about assignment')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(help_text='Gym admin who made the assignment', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainer_assignments', to='multiple_gym.member')),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_members', to='trainer_management.trainer')),
            ],
            options={
                'ordering': ['-assigned_date'],
                'unique_together': {('member', 'trainer')},
            },
        ),
        migrations.CreateModel(
            name='SessionParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('is_enrolled', models.BooleanField(default=True)),
                ('attended', models.BooleanField(default=False)),
                ('attendance_marked_at', models.DateTimeField(blank=True, null=True)),
                ('performance_rating', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Performance rating 1-5 stars', null=True)),
                ('member_feedback', models.TextField(blank=True, help_text="Member's feedback about session")),
                ('trainer_notes', models.TextField(blank=True, help_text="Trainer's notes about member's performance")),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_sessions', to='multiple_gym.member')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='trainer_management.trainingsession')),
            ],
            options={
                'ordering': ['-enrolled_at'],
                'unique_together': {('session', 'member')},
            },
        ),
        migrations.CreateModel(
            name='SessionAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marked_present', models.BooleanField(default=False)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('exercises_completed', models.TextField(blank=True, help_text='List of completed exercises')),
                ('sets_completed', models.IntegerField(default=0)),
                ('reps_completed', models.IntegerField(default=0)),
                ('weight_lifted', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('pre_workout_weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('post_workout_weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('heart_rate_max', models.IntegerField(blank=True, null=True)),
                ('heart_rate_avg', models.IntegerField(blank=True, null=True)),
                ('member_energy_level', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], max_length=20)),
                ('member_satisfaction', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], null=True)),
                ('trainer_notes', models.TextField(blank=True)),
                ('member_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='multiple_gym.member')),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trainer_management.trainer')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='trainer_management.trainingsession')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('session', 'member')},
            },
        ),
    ]
